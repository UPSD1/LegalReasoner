[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "legal-reward-system"
version = "1.0.0"
description = "Enhanced Multi-Task Legal Reward System with US Jurisdiction Support for GRPO Training"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Legal AI Development Team", email = "legal-ai@example.com"}
]
maintainers = [
    {name = "Legal AI Development Team", email = "legal-ai@example.com"}
]
keywords = [
    "legal-ai", 
    "reward-modeling", 
    "grpo-training", 
    "us-jurisdiction", 
    "verl-integration",
    "multi-task-evaluation",
    "cost-optimization"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic"
]
requires-python = ">=3.8"

dependencies = [
    # Core dependencies
    "pydantic>=2.0.0,<3.0.0",
    "pyyaml>=6.0,<7.0", 
    "python-dotenv>=1.0.0,<2.0.0",
    "aiohttp>=3.8.0,<4.0.0",
    "asyncio-throttle>=1.0.0,<2.0.0",
    
    # API provider integrations
    "openai>=1.0.0,<2.0.0",
    "anthropic>=0.18.0,<1.0.0", 
    "google-generativeai>=0.3.0,<1.0.0",
    
    # Caching and persistence
    "diskcache>=5.6.0,<6.0.0",
    "lz4>=4.0.0,<5.0.0",
    
    # Logging and monitoring
    "structlog>=23.0.0,<24.0.0",
    "colorama>=0.4.6,<1.0.0",
    "psutil>=5.9.0,<6.0.0",
    
    # Legal text processing
    "spacy>=3.6.0,<4.0.0",
    "nltk>=3.8.0,<4.0.0",
    "regex>=2023.0.0,<2024.0.0",
    "fuzzywuzzy>=0.18.0,<1.0.0",
    "python-Levenshtein>=0.20.0,<1.0.0"
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    "pytest-cov>=4.1.0,<5.0.0", 
    "pytest-benchmark>=4.0.0,<5.0.0",
    "factory-boy>=3.3.0,<4.0.0",
    "hypothesis>=6.82.0,<7.0.0",
    "freezegun>=1.2.0,<2.0.0",
    "black>=23.7.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "flake8>=6.0.0,<7.0.0", 
    "mypy>=1.5.0,<2.0.0",
    "bandit>=1.7.0,<2.0.0"
]

# VERL training integration
training = [
    "torch>=2.0.0,<3.0.0",
    "transformers>=4.30.0,<5.0.0", 
    "accelerate>=0.20.0,<1.0.0",
    "numpy>=1.24.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0"
]

# Production monitoring
monitoring = [
    "prometheus-client>=0.17.0,<1.0.0",
    "jaeger-client>=4.8.0,<5.0.0"
]

# Advanced caching
redis = [
    "redis>=4.5.0,<6.0.0"
]

# All optional dependencies
all = [
    "legal-reward-system[dev,training,monitoring,redis]"
]

[project.urls]
Homepage = "https://github.com/legal-ai/legal-reward-system"
Documentation = "https://legal-reward-system.readthedocs.io/"
Repository = "https://github.com/legal-ai/legal-reward-system.git"
"Bug Tracker" = "https://github.com/legal-ai/legal-reward-system/issues"
Changelog = "https://github.com/legal-ai/legal-reward-system/blob/main/CHANGELOG.md"

[project.scripts]
legal-reward-validate = "legal_reward_system.cli:validate_config"
legal-reward-setup = "legal_reward_system.cli:setup_environment"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["legal_reward_system*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"legal_reward_system.config" = ["*.yaml", "*.yml", "prompts/*.py"]

# ============================================================================
# DEVELOPMENT TOOL CONFIGURATIONS
# ============================================================================

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "spacy.*",
    "nltk.*", 
    "openai.*",
    "anthropic.*",
    "google.generativeai.*",
    "diskcache.*",
    "lz4.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra", 
    "--strict-markers",
    "--strict-config",
    "--cov=legal_reward_system",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "api: marks tests that require API access",
    "expensive: marks tests that use significant API credits"
]

[tool.coverage.run]
source = ["legal_reward_system"]
branch = true
omit = [
    "tests/*",
    "legal_reward_system/cli.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # Skip assert_used test

# ============================================================================
# PACKAGE METADATA AND INSTALLATION NOTES
# ============================================================================

# Installation:
# pip install -e .                    # Development installation
# pip install -e .[dev]               # With development dependencies  
# pip install -e .[training]          # With VERL training support
# pip install -e .[all]               # All optional dependencies

# Post-installation setup:
# 1. Download spaCy model: python -m spacy download en_core_web_sm
# 2. Download NLTK data: python -c "import nltk; nltk.download('punkt')"
# 3. Create .env file: cp .env.template .env (and fill in API keys)
# 4. Validate setup: legal-reward-validate

# For production deployment:
# pip install legal-reward-system[monitoring]

# For VERL training integration:
# pip install legal-reward-system[training]
# # Additional VERL-specific setup required

# Development workflow:
# pip install -e .[dev]
# pre-commit install  # If using pre-commit hooks
# pytest                # Run tests
# black .               # Format code
# mypy legal_reward_system  # Type checking